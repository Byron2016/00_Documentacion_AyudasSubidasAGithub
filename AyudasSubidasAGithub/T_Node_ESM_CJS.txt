- Desarrollo Ãštil:REQUIRE vs IMPORT âš¡ COMMON JS vs ES MODULES ðŸ¤” CJS vs ESM ðŸŸ¢ Curso de Node.JS desde cero #3
	- https://www.youtube.com/watch?v=29iYdru2KUg&list=PL3aEngjGbYhnrRfZKMxzn79qdgPxL7OWM&index=3

		- Enlaces:
			- DocumentaciÃ³n Common.JS (CJS): https://nodejs.org/docs/latest/api/modules.html
			- DocumentaciÃ³n ECMAScript Modules (ESM): https://nodejs.org/docs/latest/api/esm.html
			- CJS con ESM: https://nodejs.org/docs/latest/api/esm.html#interoperability-with-commonjs

		- Operando con ESM y CJS (28.44)
			- ESM
				- No existe
					- module.export
					- require
					- __dirname
					- __filename
					- Import directo de JSON

				- Usar en su lugar
					- console.log(import.meta.url)  --> __dirname


				- Operar con Commonjs en ESM
					- Para la gran mayorÃ­a de casos:
						- PreparaciÃ³n
							- En "package.json"
								- "main": "index.js"
								- "type": "module"

							- Crear archivo "operaciones.cjs"
								```javascript
									const suma = (numA, numB) => 	{
										return numA + numB;
									}
									const resta = (numA, numB) 	=> {
										return numA - numB;
									}
									module.exports = {suma , resta};
								```

							- Crear archivo "index.js"
								- Importar "operaciones.cjs"
								```javascript
									import {suma, resta} from "./operaciones.cjs"

									console.log(suma(4,5));
								```

							- Provar
								node index.js

					- Para importar un JSON:
            - ALTERNATIVA 1
						  - PreparaciÃ³n
						  	- En "package.json"
						  		- "main": "index.js"
						  		- "type": "module"

						  	- Crear archivo "users.json"
						  		```json
						  			[
						  				{
						  					"name":"pepito",
						  					"edad": 30
						  				},
						  				{
						  					"name":"juanito",
						  					"edad": 30
						  				}
						  			]
						  		```

						  	- Crear archivo "index.js"
						  		- Importar "user.json"
						  		```javascript
						  			import {createRequire} from "node:module"
						  			const require = createRequire(import.meta.url);

						  			const users = require("./users.json");
						  			console.log(users);
						  		```

						  	- Provar
						  		node index.js

            - (DEPRECADO) ALTERNATIVA 2 (midulive (19.45): https://www.youtube.com/watch?v=ev3Yxva4wI4&list=PLUofhDIg_38qm2oPOV-IRTTEKyrVBBaU7&index=4)
              - En browser compatibility indica que estÃ¡ DEPRECADO.
                - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import

						  - PreparaciÃ³n
						  	- En "package.json"
						  		- "main": "index.js"
						  		- "type": "module"

						  	- Crear archivo "users.json"
						  		```json
						  			[
						  				{
						  					"name":"pepito",
						  					"edad": 30
						  				},
						  				{
						  					"name":"juanito",
						  					"edad": 30
						  				}
						  			]
						  		```

						  	- Crear archivo "index.js"
						  		- Importar "user.json"
						  		```javascript
                    import users from "./users.json" assert { type: "json" } //DEPRECADO
                    import users from "./users.json" with { type: "json" } //Status: Stage 3 https://github.com/tc39/proposal-import-attributes

						  			console.log(users);
						  		```
                  - Nota:
                    - Al 20240923 ES EXPRIMENTAL.
                      - https://v8.dev/features/import-assertions
                      -

						  	- Provar
						  		node index.js

            - ALTERNATIVA 3
              - midulive (21.50): https://www.youtube.com/watch?v=ev3Yxva4wI4&list=PLUofhDIg_38qm2oPOV-IRTTEKyrVBBaU7&index=4

                - Forma 1
						  		```javascript
                    import fs from "node:fs"
                    const users = JSON.parse(fs.readFileSync("./users.json", "utf-8"))

						  			console.log(users);
						  		```
                - Forma 2 (Ya explicado anteriormente)
						  		```javascript
						  			import {createRequire} from "node:module"
						  			const require = createRequire(import.meta.url);

						  			const users = require("./users.json");
						  			console.log(users);
						  			console.log(users);
						  		```
                  - Crear un utils.js para invocarlo.
						  		  ```javascript
                      import { createRequire } from 'node:module'
                      const require = createRequire(import.meta.url)

                      export const readJSON = (path) => require(path)
						  		  ```

						  		  ```javascript
                      import { readJSON } from './utils.js'
                      const users = readJSON("./users.json")
						  		  ```
			- CJS
				- Operar con ESM en Commonjs
					- Notas
						- Se lo hace a travÃ©s de "imports dinÃ¡micos"
						- Diferencia
							- ESM funciona de forma asÃ­ncrona
								- En ESM puedo importarme las cosas sÃ­ncronas, ya que como funciona asÃ­ncronamente me da igual.
							- CJM funciona de forma sÃ­ncrona

					- Para la gran mayorÃ­a de casos:
						- PreparaciÃ³n
							- En "package.json"
								- "main": "index.js"
								- "type": "commonjs"
									- O sin nada, x default es commonjs

							- Crear archivo "operaciones.mjs"
								```javascript
									const suma = (numA, numB) => 	{
										return numA + numB;
									}
									const resta = (numA, numB) 	=> {
										return numA - numB;
									}
									export {suma , resta};
								```

							- Crear archivo "index.js"
								- Importar "operaciones.mjs"
								```javascript
									import("./operaciones.mjs")
										.then((operaciones) => {
											console.log(operaciones);
										}); //ESM --> async   commonjs --> sync
								```

								```javascript
									import("./operaciones.mjs")
										.then((suma) => {
											console.log(suma(4,9));
										}); //ESM --> async   commonjs --> sync
								```

							- Provar
								node index.js
